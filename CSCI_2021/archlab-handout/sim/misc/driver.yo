| #######################################################################
                       | # Test for copying block of size 1;
                       | #######################################################################
0x000:                      |   .pos 0
0x000: 30f46804000000000000 | main:  irmovq Stack, %rsp    # Set up stack pointer
                       |
                       |   # Set up arguments for copy function and then invoke it
0x00a: 30f20100000000000000 |   irmovq $1, %rdx    # src and dst have 1 elements
0x014: 30f6d803000000000000 |   irmovq dest, %rsi  # dst array
0x01e: 30f7b803000000000000 |   irmovq src, %rdi  # src array
0x028: 803b00000000000000   |   call ncopy
0x031: 804a02000000000000   |   call check          # Call checker code
0x03a: 00                   |   halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                       | #/* $begin ncopy-ys */
                       | ##################################################################
                       | # ncopy.ys - Copy a src block of len words to dst.
                       | # Return the number of positive words (>0) contained in src.
                       | #
                       | # Moti Begna, begna002
                       | #
                       | # Insert iaddq wherever possible.
                       | # Apply loop unrolling.
                       | # Move jumps to right after subtracting from len.
                       | #
                       | ##################################################################
                       | # Do not modify this portion
                       | # Function prologue.
                       | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                       |
                       | ##################################################################
                       | # You can modify this portion
                       |
                       | ##################################################################
                       | # ORIGINAL
                       | #  # Loop header
                       | #  xorq %rax,%rax        # count = 0;
                       | #  andq %rdx,%rdx        # len <= 0?
                       | #  jle Done              # if so, goto Done:
                       | #
                       | #Loop:
                       | #  mrmovq (%rdi), %r10   # read val from src
                       | #  andq %r10, %r10       # val <= 0?
                       | #  jle Npos              # if so, goto Npos:
                       | #  iaddq $1, %rax        # count ++
                       | #Npos:
                       | #  rmmovq %r10, (%rsi)   # store val to dst
                       | #  iaddq $-1, %rdx       # len--
                       | #  iaddq $8, %rdi        # src++
                       | #  iaddq $8, %rsi        # dst++
                       | #  andq %rdx,%rdx        # len > 0?
                       | #  jg Loop               # if so, goto Loop:
                       | ##################################################################
                       |
                       |
                       | # Loop header
0x03b: 6222                 |     andq %rdx,%rdx          # len <= 0?
0x03d: 765b00000000000000   |     jg Loop                 # if so, goto Loop:
0x046: 704902000000000000   |     jmp Done                # else, goto Done:
0x04f:                      | Setup:
                       |     #xorq %rax,%rax          # count = 0
0x04f: 2020                 |     rrmovq %rdx, %rax        # count = len
0x051: c0f00100000000000000 |     iaddq $1, %rax           # count += 1
                       |
0x05b:                      | Loop:
0x05b: 50a70000000000000000 |     mrmovq (%rdi), %r10     # read val1 from src
0x065: 50b70800000000000000 |     mrmovq $8(%rdi), %r11   # read val2 from src+8
0x06f: 40a60000000000000000 |     rmmovq %r10, (%rsi)     # store val1 to dest
0x079: 62aa                 |     andq %r10, %r10         # val1 > 0?
0x07b: 768e00000000000000   |     jg L1                   # if not, goto L1:
0x084: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x08e:                      | L1:
0x08e: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x098: 76aa00000000000000   |     jg L2                   # if len > 0, goto L2:
0x0a1: 704902000000000000   |     jmp Done                # else, goto Done:
0x0aa:                      | L2:
0x0aa: 50a71000000000000000 |     mrmovq $16(%rdi), %r10  # read val3 from src+16
0x0b4: 40b60800000000000000 |     rmmovq %r11, $8(%rsi)   # store val2 to dest+8
0x0be: 62bb                 |     andq %r11, %r11         # val2 > 0?
0x0c0: 76d300000000000000   |     jg L3                   # if not, goto L3:
0x0c9: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x0d3:                      | L3:
0x0d3: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x0dd: 76ef00000000000000   |     jg L4                   # if len > 0, goto L4:
0x0e6: 704902000000000000   |     jmp Done                # else, goto Done:
0x0ef:                      | L4:
0x0ef: 50b71800000000000000 |     mrmovq $24(%rdi), %r11  # read val4 from src+24
0x0f9: 40a61000000000000000 |     rmmovq %r10, $16(%rsi)  # store val3 to dest+16
0x103: 62aa                 |     andq %r10, %r10         # val3 > 0?
0x105: 761801000000000000   |     jg L5                   # if not, goto L5:
0x10e: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x118:                      | L5:
0x118: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x122: 763401000000000000   |     jg L6                   # if len > 0, goto L6:
0x12b: 704902000000000000   |     jmp Done                # else, goto Done:
0x134:                      | L6:
0x134: 50a72000000000000000 |     mrmovq $32(%rdi), %r10  # read val5 from src+32
0x13e: 40b61800000000000000 |     rmmovq %r11, $24(%rsi)  # store val4 to dest+24
0x148: 62bb                 |     andq %r11, %r11         # val4 > 0?
0x14a: 765d01000000000000   |     jg L7                   # if not, goto L7:
0x153: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x15d:                      | L7:
0x15d: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x167: 767901000000000000   |     jg L8                   # if len > 0, goto L8:
0x170: 704902000000000000   |     jmp Done                # else, goto Done:
0x179:                      | L8:
0x179: 50b72800000000000000 |     mrmovq $40(%rdi), %r11  # read val6 from src+40
0x183: 40a62000000000000000 |     rmmovq %r10, $32(%rsi)  # store val5 to dest+32
0x18d: 62aa                 |     andq %r10, %r10         # val5 > 0?
0x18f: 76a201000000000000   |     jg L9                   # if not, goto L9:
0x198: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x1a2:                      | L9:
0x1a2: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x1ac: 76be01000000000000   |     jg L10                   # if len > 0, goto L10:
0x1b5: 704902000000000000   |     jmp Done                # else, goto Done:
0x1be:                      | L10:
0x1be: 50a73000000000000000 |     mrmovq $48(%rdi), %r10  # read val7 from src+48
0x1c8: 40b62800000000000000 |     rmmovq %r11, $40(%rsi)  # store val6 to dest+40
0x1d2: 62bb                 |     andq %r11, %r11         # val6 > 0?
0x1d4: 76e701000000000000   |     jg L11                  # if not, goto L11:
0x1dd: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x1e7:                      | L11:
0x1e7: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x1f1: 760302000000000000   |     jg L12                  # if len > 0, goto L12:
0x1fa: 704902000000000000   |     jmp Done                # else, goto Done:
0x203:                      | L12:
0x203: 40a63000000000000000 |     rmmovq %r10, $48(%rsi)  # store val7 to dest+48
0x20d: 62aa                 |     andq %r10, %r10         # val3 > 0?
0x20f: 762202000000000000   |     jg L13                  # if not, goto L13:
0x218: c0f0ffffffffffffffff |     iaddq $-1, %rax         # count--
0x222:                      | L13:
0x222: c0f73800000000000000 |     iaddq $56, %rdi         # src += 7
0x22c: c0f63800000000000000 |     iaddq $56, %rsi         # dest += 7
0x236: c0f2ffffffffffffffff |     iaddq $-1, %rdx         # len--
0x240: 765b00000000000000   |     jg Loop                 # if len > 0, goto Loop:
                       |
                       |
                       | ##################################################################
                       | # Do not modify the following section of code
                       | # Function epilogue.
0x249:                      | Done:
0x249: 90                   |   ret
                       | ##################################################################
                       | # Keep the following label at the end of your function
0x24a:                      | End:
                       | #/* $end ncopy-ys */
0x24a:                      | EndFun:
                       | ####################################################################
                       | # Epilogue code for the correctness testing driver
                       | ####################################################################
                       |
                       | # This is the correctness checking code.
                       | # It checks:
                       | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                       | #   2. The total length of the code is less than or equal to 1000.
                       | #      Set %rax to 0xcccc if not.
                       | #   3. The source data was copied to the destination.
                       | #      Set %rax to 0xdddd if not.
                       | #   4. The words just before and just after the destination region
                       | #      were not corrupted.  Set %rax to 0xeeee if not.
                       | # If all checks pass, then sets %rax to 0xaaaa
0x24a:                      | check:
                       |   # Return value test
0x24a: 30fa0100000000000000 |   irmovq $1,%r10
0x254: 61a0                 |   subq %r10,%rax
0x256: 737202000000000000   |   je checkb
0x25f: 30f0bbbb000000000000 |   irmovq $0xbbbb,%rax  # Failed test #1
0x269: 70b003000000000000   |   jmp cdone
0x272:                      | checkb:
                       |   # Code length check
0x272: 30f04a02000000000000 |   irmovq EndFun,%rax
0x27c: 30f23b00000000000000 |   irmovq StartFun,%rdx
0x286: 6120                 |   subq %rdx,%rax
0x288: 30f2e803000000000000 |   irmovq $1000,%rdx
0x292: 6102                 |   subq %rax,%rdx
0x294: 75b002000000000000   |   jge checkm
0x29d: 30f0cccc000000000000 |   irmovq $0xcccc,%rax  # Failed test #2
0x2a7: 70b003000000000000   |   jmp cdone
0x2b0:                      | checkm:
0x2b0: 30f2d803000000000000 |   irmovq dest, %rdx # Pointer to next destination location
0x2ba: 30f3b803000000000000 |   irmovq src,%rbx   # Pointer to next source location
0x2c4: 30f70100000000000000 |   irmovq $1,%rdi  # Count
0x2ce: 6277                 |   andq %rdi,%rdi
0x2d0: 732e03000000000000   |   je checkpre         # Skip check if count = 0
0x2d9:                      | mcloop:
0x2d9: 50020000000000000000 |   mrmovq (%rdx),%rax
0x2e3: 50630000000000000000 |   mrmovq (%rbx),%rsi
0x2ed: 6160                 |   subq %rsi,%rax
0x2ef: 730b03000000000000   |   je  mok
0x2f8: 30f0dddd000000000000 |   irmovq $0xdddd,%rax # Failed test #3
0x302: 70b003000000000000   |   jmp cdone
0x30b:                      | mok:
0x30b: 30f00800000000000000 |   irmovq $8,%rax
0x315: 6002                 |   addq %rax,%rdx    # dest ++
0x317: 6003                 |   addq %rax,%rbx    # src++
0x319: 30f00100000000000000 |   irmovq $1,%rax
0x323: 6107                 |   subq %rax,%rdi    # cnt--
0x325: 76d902000000000000   |   jg mcloop
0x32e:                      | checkpre:
                       |   # Check for corruption
0x32e: 30f2d003000000000000 |   irmovq Predest,%rdx
0x338: 50020000000000000000 |   mrmovq (%rdx), %rax  # Get word before destination
0x342: 30f2fadebc0000000000 |   irmovq $0xbcdefa, %rdx
0x34c: 6120                 |   subq %rdx,%rax
0x34e: 736a03000000000000   |   je checkpost
0x357: 30f0eeee000000000000 |   irmovq $0xeeee,%rax  # Failed test #4
0x361: 70b003000000000000   |   jmp cdone
0x36a:                      | checkpost:
                       |   # Check for corruption
0x36a: 30f2e003000000000000 |   irmovq Postdest,%rdx
0x374: 50020000000000000000 |   mrmovq (%rdx), %rax  # Get word after destination
0x37e: 30f2bcfade0000000000 |   irmovq $0xdefabc, %rdx
0x388: 6120                 |   subq %rdx,%rax
0x38a: 73a603000000000000   |   je checkok
0x393: 30f0eeee000000000000 |   irmovq $0xeeee,%rax # Failed test #4
0x39d: 70b003000000000000   |   jmp cdone
0x3a6:                      | checkok:
                       |   # Successful checks
0x3a6: 30f0aaaa000000000000 |   irmovq $0xaaaa,%rax
0x3b0:                      | cdone:
0x3b0: 90                   |   ret
                       |
                       | ###############################
                       | # Source and destination blocks
                       | ###############################
0x3b8:                      |   .align 8
0x3b8:                      | src:
0x3b8: 0100000000000000     | 	.quad 1
0x3c0: fadebc0000000000     |   .quad 0xbcdefa # This shouldn't get moved
                       |
0x3d0:                      |   .align 16
0x3d0:                      | Predest:
0x3d0: fadebc0000000000     |   .quad 0xbcdefa
0x3d8:                      | dest:
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0:                      | Postdest:
0x3e0: bcfade0000000000     |   .quad 0xdefabc
                       |
0x3e8:                      | .align 8
                       | # Run time stack
0x3e8: 0000000000000000     |   .quad 0
0x3f0: 0000000000000000     |   .quad 0
0x3f8: 0000000000000000     |   .quad 0
0x400: 0000000000000000     |   .quad 0
0x408: 0000000000000000     |   .quad 0
0x410: 0000000000000000     |   .quad 0
0x418: 0000000000000000     |   .quad 0
0x420: 0000000000000000     |   .quad 0
0x428: 0000000000000000     |   .quad 0
0x430: 0000000000000000     |   .quad 0
0x438: 0000000000000000     |   .quad 0
0x440: 0000000000000000     |   .quad 0
0x448: 0000000000000000     |   .quad 0
0x450: 0000000000000000     |   .quad 0
0x458: 0000000000000000     |   .quad 0
0x460: 0000000000000000     |   .quad 0
                       |
0x468:                      | Stack:
